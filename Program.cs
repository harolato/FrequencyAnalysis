using System;
using System.Collections.Generic;
using System.Linq;

namespace FrequencyAnalyser
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length > 0)
            {

                string pathToFile = args[0]; // First argument passeed to program must be path to file
                string text = "";

                try
                {
                    text = System.IO.File.ReadAllText(@pathToFile);
                    // Save contents of a file into string type variable
                }
                catch (System.IO.FileNotFoundException e)
                {
                    Console.WriteLine(e.Message);
                }

                /*
                 * Transform text to be case-insensitive
                 */
                if (args.Length >= 2 && args.GetValue(1).Equals("-CaseInsensitive"))
                {
                    text = text.ToLower();
                }

                var frequencyArray = Program.analyzeCharacterFrequency(text); // execute analyser method


                Console.WriteLine("Total characters: " + text.Length);
                    // output total number of letters excl. white space chars

                /*
                 * Iterates through array generated by analyzeCharacterFrequency method and displays top 10 most frequent letters
                 */
                for (var i = 0; i < ((frequencyArray.Length < 10) ? frequencyArray.Length : 10); i++)
                {
                    var letter = frequencyArray[i];
                    Console.WriteLine(letter.Key + " - " + letter.Value);
                }

            }
            else
            {
                Console.WriteLine("Path to text file must be provided.");
            }
            // Wait for key stroke to terminate application 
            Console.WriteLine("");
            Console.WriteLine("Press any key to terminate application.");
            Console.ReadKey();
        }

        /*
         * name : analyzeCharacterFrequency
         * args : (String) textToAnalyze
         * returns : KeyValuePair<char, int>[]
         * desc : Generates ordered key-value pair type array of character frequencies.            
         */
        static KeyValuePair<char, int>[] analyzeCharacterFrequency( string textToAnalyse )
        {

            textToAnalyse = string.Join("", textToAnalyse.Where(c => !char.IsWhiteSpace(c))); // Remove white space characters

            char[] characters = textToAnalyse.ToCharArray(); 

            Dictionary<char, int> frequencyTable = new Dictionary<char, int>();

            for (var i = 0; i < characters.Length; i++)
            {
                var character = characters[i];

                if (frequencyTable.ContainsKey(character))
                {
                    frequencyTable[character] += 1;
                }
                else
                {
                    frequencyTable.Add(character, 1);
                }
            }

            return frequencyTable.OrderByDescending(x => x.Value).ToArray();
        }
    }
}
